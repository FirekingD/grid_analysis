install.packages("sf")
install.packages("dyplyr")
install.packages("dyplr")
install.packages("dplyr")
install.packages("ggplot")
install.packages("ggplot2")
install.packages("cartography")
install.packages("tmap")
library(dplyr)
data("starwars")
starwars
starwars$species
filter(starwars, species == "Human")
print("Hello World!")
cat("Hello", "World", "!")
cat("abc", 12.3, sqrt(49), TRUE)
lili <- c("pouet", 54, TRUE)
View(starwars)
length(lili)
#Changer la valeur du deuxième élément de votre objet
lili[2]
lili[1]
lili[3]
lili[25]
lili <- c(12, 54, 374)
lili[1]
lili[2] <- 88
lili[2]
names(lili)
names(lili) <- c("A","B","C")
names(lili)
names(lili)
install.packages("palmerpenguins")
library(palmerpenguins )
library(palmerpenguins )
penguins
names(penguins)
mean(body_mass_g)
View(penguins)
penguins$body_mass_g
mean(penguins$body_mass_g)
mean(penguins$body_mass_g, na.rm = T)
install.packages("ade4")
install.packages("factoextra")
install.packages("palmerpenguins")
library(dplyr)
library(ggplot2)
library(ade4)
library(factoextra)
library(palmerpenguins)
data("penguins")
head(penguins)
anyNA(penguins, recursive = FALSE)
na.omit(penguins)
anyNA(penguins, recursive = FALSE)
anyNA(penguins, recursive = FALSE)
head(penguins)
anyNA(penguins)
anyNA(penguins)
anyNA(penguins)
ping_filter <- na.omit(penguins)
anyNA(ping_filter)
nrow(penguins)
nrow(ping_filter)
summary(penguins)
#
cor(*)
# type des champs du data frame
class(ping_filter$bill_length_mm)
# type des champs du data frame
class(ping_filter$yea)
# type des champs du data frame
class(ping_filter$year)
# str
str(penguins)
# Nage de points
plot(ping_filter)
names(ping_filter)
plot(ping_filter[" "species","island","bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g","sex","year""])
# Nage de points
plot(ping_filter[c("species","island","bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g","sex","year")])
plot(ping_filter[c("species","island","bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g","sex","year")])
# Nage de points
plot(ping_filter[,c("species","island","bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g","sex","year")])
plot(ping_filter[,c("species","island","bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g","sex","year")])
plot(ping_filter[,c("bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g")])
ping_filter_num <- select(ping_filter,where(is.numeric)
ping_filter_num <- select(ping_filter,where(is.numeric))
ping_filter_num <- select(ping_filter,where(is.numeric))
ping_filter_num <- select(ping_filter_num, -year)
cor(ping_filter_num)
cor(ping_filter[,c("bill_length_mm","bill_depth_mm","flipper_length_mm","body_mass_g")])
# Histogramme
hist(ping_filter_num)
# Histogramme
hist(ping_filter_num$flipper_length_mm, breaks = 30)
library(ggally)
library(GGgally)
library(GGally)
library(GGally)
install.packages("GGally")
library(GGally)
# version synthétique
ggpairs(ping_filter_num)
ggpairs(ping_filter_num, package="reshape", mapping=ggplot2::aes(colour = sex),
lower=list(combo=wrap("facethist",binwidth=1)))
ggpairs(ping_filter_num, mapping=ggplot2::aes(colour = sex),
lower=list(combo=wrap("facethist",binwidth=1)))
# version synthétique
ggpairs(ping_filter_num)
# version synthétique
ggpairs(ping_filter_num, title="Penguins data", colour = "body_mass")
# version synthétique
ggpairs(ping_filter_num, colour = "body_mass")
# version synthétique
ggpairs(ping_filter_num, colour = "body_mass_g")
# version synthétique
ggpairs(ping_filter_num)
ggpairs(ping_filter_num, columns = select(ping_filter_num, -year) aes(colors(species)))
# version synthétique
ggpairs(ping_filter_num)
dataACP <- ping_filter_num
rm(ping_filter_num)
hist(dataACP$flipper_length_mm, breaks = 30)
var(dataACP)
View(dataACP)
View(var(dataACP))
mat_var <- var(dataACP)
View(mat_var)
variances <- diag(mat_var)
# Inertie = sommes des variances
inerites <- sum(variances)
install.packages("factoextra")
dataACP %>% var %>% diag  %>% sum
get_eigenvalue(dataACP)
get_eig(dataACP)
library(factoextra)
get_eigenvalue(dataACP)
acp_dataACP <- dudi.pca(dataACP,
scannf = FALSE,
nf = 5
)
fviz_eig(acp_dataACP)
fviz_pca_ind(acp_dataACP,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(acp_dataACP,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE )
fviz_pca_ind(acp_dataACP,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_ind(acp_dataACP,
col.ind = "Légende",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_ind(acp_dataACP,
col.ind = "Légende",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_ind(acp_dataACP,
col.ind = "Legende",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_ind(acp_dataACP,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(acp_dataACP,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE )
fviz_pca_biplot(acp_dataACP, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969"
)
screeplot(acp_dataACP, main = "Screeplot - Eigenvalues")
s.corcircle(acp_dataACP$co)
s.label(acp_dataACP$li,
xax = 1,     # Dimension 1
yax = 2)     # Dimension 2
# Biplot of individuals and variables
scatter(acp_dataACP,
posieig = "none", # Hide the scree plot
clab.row = 0      # Hide row labels
)
eig.val <- get_eigenvalue(acp_dataACP)
eig.val
res.var <- get_pca_var(acp_dataACP)
res.var$coord
res.var$contrib
res.var$cos2
res.ind <- get_pca_ind(acp_dataACP)
res.ind$coord
res.ind$contrib
res.ind$cos2
fviz_pca_ind(acp_dataACP,
col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE)
fviz_pca_var(acp_dataACP,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE )
fviz_pca_biplot(acp_dataACP, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969"
)
screeplot(acp_dataACP, main = "Screeplot - Eigenvalues")
s.corcircle(acp_dataACP$co)
s.label(acp_dataACP$li,
xax = 1,     # Dimension 1
yax = 2)     # Dimension 2
scatter(acp_dataACP,
posieig = "none", # Masquer le scree plot
clab.row = 0      # Masquer les étiquettes des lignes
)
fviz_pca_biplot(acp_dataACP, repel = TRUE,
col.var = "#2E9FDF",
col.ind = "#696969"
)
fviz_pca_var(acp_dataACP,
col.var = "contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE )
ggplot(penguins, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +
geom_point() +
theme_light()
fviz_pca_ind(acp_dataACP,
col.ind = groups, # color by groups
palette = c("#00AFBB",  "#FC4E07"),
addEllipses = TRUE, # Concentration ellipses
ellipse.type = "confidence",
legend.title = "Groups",
repel = TRUE
)
ggplot(acp_dataACP, aes(x = bill_length_mm, y = bill_depth_mm, colour = species)) +
geom_point() +
theme_light()
path<-"D:/Téléchargements/consommation-annuelle-residentielle-par-adresse.xls"
exists(path)
file.exists(path)
library(readxl)
d<-read_xls(path)
library(xlsx)
d<-read_xlsx(path)
d<-read_excel(path)
df<-read.csv("D:/dem/grid_analysis/data/consommation_annuelle_residentielle_adresse_paris.csv")
df<-read.csv("D:/dem/grid_analysis/data/consommation_annuelle_residentielle_adresse_paris.csv",sep=";")
library(dplyr)
library(ggplot2)
library(ade4)
library(factoextra)
#install.packages("lattice")
#install.packages("geojsonsf")
#install.packages("sf")
#install.packages("readxl")
install.packages("xlsx")
library(xlsx)
library(geojsonsf)
library(sf)
library(lattice)
library(GGally)
library(readxl)
conso_elec<- read.csv("/data/consommation_annuelle_residentielle_adresse_paris.csv",sep=";")
file.exists("data/consommation_annuelle_residentielle_adresse_paris.csv")
file.exists("./data/consommation_annuelle_residentielle_adresse_paris.csv")
conso_elec<- read.csv("./data/consommation_annuelle_residentielle_adresse_paris.csv",sep=";")
getwd(())
getwd()
getwd()
setwd("D:/dem/grid_analysis")
conso_elec<- read.csv("./data/consommation_annuelle_residentielle_adresse_paris.csv",sep=";")
prod_elec<- read.csv("./data/production-electrique-par-filiere-a-la-maille-region.csv", sep=";")
iris_paris<-st_read(dsn="data",layer="iris_paris")
plot(iris_paris)
plot(iris_paris)
#plot(iris_paris)
iris_paris_joined_conso<-full_join(iris_paris,conso_elec)
help("full_join.sf")
conso_elec<- read.csv("./data/consommation_annuelle_residentielle_adresse_paris.csv",sep=";")
prod_elec<- read.csv("./data/production-electrique-par-filiere-a-la-maille-region.csv", sep=";")
iris_paris<-st_read(dsn="data",layer="iris_paris")
View(iris_paris)
View(iris_paris)
View(conso_elec)
View(conso_elec)
#plot(iris_paris)
iris_paris_joined_conso<-full_join.sf(iris_paris,conso_elec,by=("CODE_IRIS"="Code.IRIS"))
#plot(iris_paris)
iris_paris_joined_conso<-join(iris_paris,conso_elec,by=("CODE_IRIS"="Code.IRIS"),type="full")
library(dplyr)
#plot(iris_paris)
iris_paris_joined_conso<-join(iris_paris,conso_elec,by=("CODE_IRIS"="Code.IRIS"),type="full")
type(iris_paris)
class(iris_paris)
class(conso_elec)
#plot(iris_paris)
iris_paris_joined_conso<-merge(iris_paris,conso_elec,by=("CODE_IRIS"="Code.IRIS"),type="full")
help(merge)
#plot(iris_paris)
iris_paris_joined_conso<-merge(iris_paris,conso_elec,by.x="CODE_IRIS",by.y="Code.IRIS",type="full")
View(iris_paris_joined_conso)
View(iris_paris_joined_conso)
plot(iris_paris_joined_conso)
1+2
plot(iris_paris_joined_conso$Consommation.annuelle.moyenne.par.logement.de.l.adresse..MWh.)
plot(iris_paris_joined_conso$geometry,iris_paris_joined_conso$Consommation.annuelle.moyenne.par.logement.de.l.adresse..MWh.)
plot(iris_paris_joined_conso$geometry)
#plot(iris_paris_joined_conso$geometry)
iris_paris_joined_conso2018<-iris_paris_joined_conso[iris_paris_joined_conso$Année=2018]
#plot(iris_paris_joined_conso$geometry)
iris_paris_joined_conso2018<-iris_paris_joined_conso[iris_paris_joined_conso$Année==2018]
#plot(iris_paris_joined_conso$geometry)
iris_paris_joined_conso2018<-iris_paris_joined_conso[Année==2018]
#plot(iris_paris_joined_conso$geometry)
iris_paris_joined_conso2018<-iris_paris_joined_conso["Année"==2018]
View(iris_paris_joined_conso2018)
View(iris_paris_joined_conso2018)
#plot(iris_paris_joined_conso$geometry)
iris_paris_joined_conso2018<-filter(iris_paris_joined_conso,"Année"==2018)
#plot(iris_paris_joined_conso$geometry)
iris_paris_joined_conso2018<-filter(iris_paris_joined_conso,"Année"=="2018")
#plot(iris_paris_joined_conso$geometry)
iris_paris_joined_conso2018<-filter(iris_paris_joined_conso,Année=="2018")
View(iris_paris_joined_conso2018)
View(iris_paris_joined_conso2018)
iris_paris_joined_conso2019<-filter(iris_paris_joined_conso,Année=="2019")
iris_paris_joined_conso2020<-filter(iris_paris_joined_conso,Année=="2020")
heatmap(iris_paris_joined_conso2018$Consommation.annuelle.moyenne.par.logement.de.l.adresse..MWh.)
gggplot(iris_paris_joined_conso2018,aes(x = Consommation.annuelle.moyenne.par.logement.de.l.adresse..MWh.))+geom_tile()
ggplot(iris_paris_joined_conso2018,aes(x = Consommation.annuelle.moyenne.par.logement.de.l.adresse..MWh.))+geom_tile()
ggplot(iris_paris_joined_conso2018,aes(x = Nombre.de.logements,y=Consommation.annuelle.moyenne.par.logement.de.l.adresse..MWh.))+geom_tile()
ggplot(iris_paris_joined_conso2018,aes(x = geometry,y=Consommation.annuelle.moyenne.par.logement.de.l.adresse..MWh.))+geom_tile()
